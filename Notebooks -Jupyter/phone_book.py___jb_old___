"""
# Phonebook

Make a command line interface phonebook that supports the following options:

__C.R.U.D.__

1. Create New Contact
2. Retrieve Contact
3. Update Existing Contact
4. Delete Contact

Here is an example of contact data being stored with a nickname key as a __dictionary of dictionaries__:

```
phonebook = {'Kieran': {'name': 'Kieran',
                        'number': 8456331959,
                        'phrase': 'Good code is not written, it's re-written.'},
            'Lambda': {'name': 'Lambda',
                         'number': 8454185633,
                         'phrase': 'I am a robot.'}}
```
Here is another implementation; A __list of dictionaries__:

```
phonebook = [{'name': 'Kieran',
            'number':8456331959,
            'phrase': 'Good code is not written, it's re-written.'},
            {'name': 'Lambda',
             'number':8454185633,
             'phrase': 'I am a robot.'}]
```

Or perhaps a __List of lists__:
```
phonebook = [['Kieran',
              8456331959,
              'Good code is not written, it's re-written.'],
              [Lambda',
               8454185633,
               I am a robot.']]
```

###### These are suggestions... Feel free to experiment and store contacts in any way that makes sense to you!

# Advanced
Support searching by:

 - Partial Name
 - Phone Number
 - Partial Phrase

 If there are multiple results, display each of them.


# Super Advanced
- Add Save and Load features for your contact data by saving a csv file.

- Using the python CSV Module's CSVDictReader, download your google contacts and add them to your phonebook on startup


# Future
Use the Twilio API to send a text message from your program.
"""
import sys


def main_menu():
    phonebook = dict()
    option = (input("Welcome to Mr. Phonebook, please choose from a the Menu Options"
        "\n 1. Create New Contact"
        "\n 2. Retrieve Contact"
        "\n 3. Update Existing Contact"
        "\n 4. Delete Contact"
        "\n 5. Exit Phonebook"
        "\n Please Enter: "))

    if option == '1':
        print("Creating new entry")
        create()

    elif option == '2':
        print("Retrieving entry")
        retrieve()

    elif option == '3':
        print("Updating entry")
        update()

    elif option == '4':
        print("Deleting entry")
        delete()

    elif option == '5':
        print("Exiting Phonebook")
        sys.exit()

def create():
    create_name_input = input("Enter the name of the person you would like to add into the phonebook:   ")
    create_number_input = input("Enter the number of the person you would like to add into the phonebook:  ")
    create_phrase_input = input("Enter the phrase associated with the person you are adding into the phonebook:  ")
    # this function take user input and then add a new entry into the phonebook


    pass

def retrieve():
    retrieve_input = input("Insert the name, number, or phrase of the person you are searching for:  ")
    # this function will take user input and use it to search the phonebook


    pass

def update():
    update_name_input = input("Enter the new name for the current phonebook entry:  ")
    update_number_input = input("Enter the new number for the current phonebook entry:  ")
    update_phrase_input = input("Enter the new phrase for the current phonebook entry:  ")


    pass

def delete():
    delete_name_input = input("Enter the name for the phonebook entry you want to remove:  ")
    delete_number_input = input("Enter the number for the phonebook entry you want to remove:  ")
    delete_phrase_input = input("Enter the phrase for the phonebook entry you want to remove:  ")


    pass

main_menu()
